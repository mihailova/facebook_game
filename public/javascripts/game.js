// Generated by CoffeeScript 1.6.1
(function() {
  var Game,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Game = (function() {

    function Game(user_id) {
      var _this = this;
      this.user_id = user_id;
      this.selectors = {
        users_table: $('#users-table'),
        category: $('#category'),
        message: $('#message'),
        bet_btn: $('.bet-btn')
      };
      $('#fold').on('click', function() {
        return _this.ws.send(JSON.stringify({
          kind: 'fold'
        }));
      });
      $('#raise').on('click', function() {
        return _this.ws.send(JSON.stringify({
          kind: 'raise',
          bet: $('input[name=raise]').val()
        }));
      });
      $('#call').on('click', function() {
        return _this.ws.send(JSON.stringify({
          kind: 'call'
        }));
      });
      $('#answer1').on('click', function() {
        return _this.ws.send(JSON.stringify({
          kind: 'answer',
          answer: $('#answer1').text(),
          button: '1'
        }));
      });
      $('#answer2').on('click', function() {
        return _this.ws.send(JSON.stringify({
          kind: 'answer',
          answer: $('#answer2').text(),
          button: '2'
        }));
      });
      $('#answer3').on('click', function() {
        return _this.ws.send(JSON.stringify({
          kind: 'answer',
          answer: $('#answer3').text(),
          button: '3'
        }));
      });
      $('#answer4').on('click', function() {
        return _this.ws.send(JSON.stringify({
          kind: 'answer',
          answer: $('#answer4').text(),
          button: '4'
        }));
      });
      this;
    }

    Game.prototype.start = function() {
      var _this = this;
      this.ws = new WebSocket('ws://localhost:9000/game/join');
      this.ws.onerror = function() {
        return alert("WebSocket Error " + error);
      };
      this.ws.onclose = function() {
        return _this.render({
          message: 'Connection closed'
        });
      };
      this.ws.onopen = function() {
        return _this.render({
          message: 'Connection opened'
        });
      };
      this.ws.onmessage = function(e) {
        var data;
        data = JSON.parse(e.data);
        console.log(data.kind);
        switch (data.kind) {
          case 'join':
          case 'quit':
            return _this.render(data, 'users-table', _this.selectors.users_table);
          case 'start':
            return _this.render(data, 'message', _this.selectors.message);
          case 'category':
            return _this.showCategory(data);
          case 'user_on_turn':
            return _this.betting(data);
          case 'call_or_raise':
            return _this.call_or_raise(data);
          case 'fold':
            return _this.fold(data);
          case 'win':
            return _this.win(data);
          case 'question':
            return _this.askQuestion(data);
          case 'answer':
            return _this.markAnswer(data);
          case 'message':
            return _this.message(data);
          case 'finish_answering':
            return _this.finishAnswering(data);
          case 'more_winners':
            return _this.moreWinners(data);
        }
      };
      return this;
    };

    Game.prototype.stop = function() {
      return this.ws.close();
    };

    Game.prototype.render = function(data, tmpl_name, el) {
      var result, template;
      if (tmpl_name == null) {
        tmpl_name = 'status';
      }
      if (el == null) {
        el = $('#status');
      }
      template = $("#" + tmpl_name + "-template").html();
      result = _.template(template, data);
      return el.html(result);
    };

    Game.prototype.showCategory = function(data) {
      var member, members, _i, _len, _results;
      $('div.question').hide();
      $('#message-bet').show();
      $('#bet').show();
      $('#category').show();
      this.render(data, 'category', this.selectors.category);
      $('#bet').text(data.bet);
      $("#message").hide();
      members = data.members;
      _results = [];
      for (_i = 0, _len = members.length; _i < _len; _i++) {
        member = members[_i];
        _results.push($("#member-" + member.uid + " span.points").text(member.points));
      }
      return _results;
    };

    Game.prototype.betting = function(data) {
      var current_player, max_bet, uncall_bet;
      console.log('betting');
      current_player = parseInt(data.user_on_turn);
      max_bet = parseInt(data.max_bet);
      uncall_bet = parseInt(data.user_uncall_bet);
      $('.betting').removeClass('betting');
      $("#member-" + current_player).addClass('betting');
      $('input[name=raise]').attr("min", uncall_bet + 1);
      $('input[name=raise]').attr("max", max_bet);
      $('span.bet').text(uncall_bet);
      if (current_player === this.user_id) {
        return this.selectors.bet_btn.show();
      } else {
        return this.selectors.bet_btn.hide();
      }
    };

    Game.prototype.call_or_raise = function(data) {
      var game_bet, message, user_points, user_uid;
      message = data.message;
      user_uid = data.user_uid;
      game_bet = data.game_bet;
      user_points = data.user_points;
      $('#message-bet').text(message);
      $("#member-" + user_uid + " span.points").text(user_points);
      return $('#bet').text(game_bet);
    };

    Game.prototype.fold = function(data) {
      var message;
      message = data.message;
      return $('#message-bet').text(message);
    };

    Game.prototype.win = function(data) {
      var message, user_points, user_uid;
      console.log('win');
      $('#category').hide();
      $('.betting').removeClass('betting');
      this.selectors.bet_btn.hide();
      message = data.message;
      user_uid = data.user_uid;
      user_points = data.user_points;
      $('#message-bet').show();
      $('#message-bet').text(message);
      return $("#member-" + user_uid + " span.points").text(user_points);
    };

    Game.prototype.askQuestion = function(data) {
      var answer1, answer2, answer3, answer4, members, question, _ref;
      console.log('question');
      $('#message-bet').hide();
      $('#bet').hide();
      question = data.question;
      answer1 = data.answer1;
      answer2 = data.answer2;
      answer3 = data.answer3;
      answer4 = data.answer4;
      members = data.members;
      $('#category').hide();
      $('.betting').removeClass('betting');
      this.selectors.bet_btn.hide();
      $('div.question').show();
      $('h4.question').text(question);
      $('#answer1').text(answer1);
      $('#answer2').text(answer2);
      $('#answer3').text(answer3);
      $('#answer4').text(answer4);
      $('#answer1').addClass('btn');
      $('#answer2').addClass('btn');
      $('#answer3').addClass('btn');
      $('#answer4').addClass('btn');
      $('#answer1').addClass('answer');
      $('#answer2').addClass('answer');
      $('#answer3').addClass('answer');
      $('#answer4').addClass('answer');
      $('div.question').removeClass('unactive');
      $('button.right').removeClass('right');
      $('button.check').removeClass('check');
      if ((_ref = this.user_id, __indexOf.call(members, _ref) >= 0)) {
        return $('div.question').removeClass('unactive');
      } else {
        return $('div.question').addClass('unactive');
      }
    };

    Game.prototype.markAnswer = function(data) {
      var button;
      console.log('markanswer');
      button = parseInt(data.button);
      $("#answer" + button).addClass('check');
      $('#answer1').removeClass('btn');
      $('#answer2').removeClass('btn');
      $('#answer3').removeClass('btn');
      $('#answer4').removeClass('btn');
      $('#answer1').removeClass('answer');
      $('#answer2').removeClass('answer');
      $('#answer3').removeClass('answer');
      $('#answer4').removeClass('answer');
      return $('div.question').addClass('unactive');
    };

    Game.prototype.message = function(data) {
      $('#message-bet').show();
      return $('#message-bet').text(data.message);
    };

    Game.prototype.moreWinners = function(data) {
      var member, members, _i, _len, _results;
      $('#message-bet').show();
      $('#message-bet').text(data.message);
      members = data.members;
      _results = [];
      for (_i = 0, _len = members.length; _i < _len; _i++) {
        member = members[_i];
        _results.push($("#member-" + member.uid + " span.points").text(member.points));
      }
      return _results;
    };

    Game.prototype.finishAnswering = function(data) {
      var rigth_answer;
      $('#answer1').removeClass('btn');
      $('#answer2').removeClass('btn');
      $('#answer3').removeClass('btn');
      $('#answer4').removeClass('btn');
      $('#answer1').removeClass('answer');
      $('#answer2').removeClass('answer');
      $('#answer3').removeClass('answer');
      $('#answer4').removeClass('answer');
      $('div.question').addClass('unactive');
      rigth_answer = data.message;
      if ($('#answer1').text() === rigth_answer) {
        return $('#answer1').addClass('right');
      } else if ($('#answer2').text() === rigth_answer) {
        return $('#answer2').addClass('right');
      } else if ($('#answer3').text() === rigth_answer) {
        return $('#answer3').addClass('right');
      } else if ($('#answer4').text() === rigth_answer) {
        return $('#answer4').addClass('right');
      }
    };

    Game.prototype.createTimer = function(sec) {
      var counter;
      return counter = setInterval(this.timer(sec), 1000);
    };

    Game.prototype.timer = function(sec) {
      sec = sec - 1;
      if (sec <= 0) {
        clearInterval(counter);
      }
      if (sec > 9) {
        $('#timer').text("00:" + sec);
      }
      if (sec <= 9) {
        return $('#timer').text("00:0" + sec);
      }
    };

    return Game;

  })();

  window.Game = Game;

}).call(this);
